// Code generated by protoc-gen-rest. DO NOT EDIT
//
// Source: examples/texttransform/v1/texttransform.proto

package texttransformrest

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	v1 "github.com/voytechnology/protoc-gen-rest/examples/texttransform/v1"
	http "net/http"
)

type TextTransformServiceServer interface {
	Capitalize(ctx context.Context, req *v1.CapitalizeRequest) (*v1.CapitalizeResponse, error)
}

type TextTransformServiceHandler struct {
	server  TextTransformServiceServer
	mapping map[string]map[string]http.HandlerFunc
}

func (h *TextTransformServiceHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if methods, ok := h.mapping[r.URL.Path]; ok {
		if handler, ok := methods[r.Method]; ok {
			handler(w, r)
		} else {
			w.WriteHeader(http.StatusMethodNotAllowed)
		}
		return
	} else {
		w.WriteHeader(http.StatusNotFound)
	}
}

func NewTextTransformServiceHandler(server TextTransformServiceServer) *TextTransformServiceHandler {
	h := &TextTransformServiceHandler{
		mapping: make(map[string]map[string]http.HandlerFunc),
		server:  server,
	}

	h.mapping = map[string]map[string]http.HandlerFunc{
		"/v1/texttransform/capitalize": map[string]http.HandlerFunc{
			"POST": h.CapitalizeHandler,
		},
	}
	return h
}
func (h *TextTransformServiceHandler) CapitalizeHandler(w http.ResponseWriter, r *http.Request) {
	var req v1.CapitalizeRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, "unable to parse JSON: %s", err.Error())
		return
	}
	defer r.Body.Close()
	resp, err := h.server.Capitalize(r.Context(), &req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprintf(w, "unable to serve: %s", err.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(resp)
}
