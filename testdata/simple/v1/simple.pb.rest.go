// Code generated by protoc-gen-rest. DO NOT EDIT.
// versions:
//  protoc-gen-rest v0.0.1
// source: testdata/simple/v1/simple.proto

package simple

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
)

type SimpleServiceServer interface {
	Get(ctx context.Context, req string) (string, error)
	Set(ctx context.Context, req string) (string, error)
}

type simpleserviceHandler struct {
	server SimpleServiceServer
	// map of path to methods associated with individual handlers.
	mapping map[string]map[string]http.HandlerFunc
}

func (h *simpleserviceHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	if methods, ok := h.mapping[r.URL.Path]; ok {
		if handler, ok := methods[r.Method]; ok {
			handler(w, r)
		} else {
			w.WriteHeader(http.StatusMethodNotAllowed)
		}
		return
	} else {
		w.WriteHeader(http.StatusNotFound)
	}
}

func NewSimpleServiceHandler(server SimpleServiceServer) *simpleserviceHandler {
	h := &simpleserviceHandler{
		mapping: make(map[string]map[string]http.HandlerFunc),
		server:  server,
	}

	h.mapping = map[string]map[string]http.HandlerFunc{
		"/simple/n": map[string]http.HandlerFunc{
			"GET":  h.get,
			"POST": h.set,
		},
	}

	return h
}
func (h *simpleserviceHandler) get(w http.ResponseWriter, r *http.Request) {
	// TODO: Add more than JSON
	// TODO: Are there other methods that should not be supported?
	var req string

	resp, err := h.server.Get(r.Context(), req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprintf(w, "Unable to Serve: %s", err.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(resp))
}
func (h *simpleserviceHandler) set(w http.ResponseWriter, r *http.Request) {
	// TODO: Add more than JSON
	// TODO: Are there other methods that should not be supported?
	var req string

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprintf(w, "Unable to parse JSON: %s", err.Error())
		return
	}
	defer r.Body.Close()

	resp, err := h.server.Set(r.Context(), req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprintf(w, "Unable to Serve: %s", err.Error())
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(resp))
}
